import java.util.Random;
import java.util.Scanner;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.nio.file.Files;
import java.nio.file.Path;

public class Juego {
	
	Random random = new Random();
	static String[][] matrizPersonajes = new String[10][5];
	static String[] preguntas = new String[]{"1.- ¿Es bellako/a?", "2.- ¿Toma kitty chelas?", "3.- ¿Es fan de Chayan?", "4.- ¿Le gusta el mambo?"};
	static int pRandom;
	static String nomElejido;
	String jugar, numP, respuesta, usuario;
	int contador, pregunta;
	Scanner input = new Scanner(System.in);
	
	public Juego() {
		
	}
	
	public void ImprimirJuego() {
		CrearPersonajesNR();
		pRandom = (int) Math.floor(Math.random() * 10);
		nomElejido = matrizPersonajes[pRandom][0].replace(":","");
		
		System.out.println("Los personajes son: ");
		contador = 0;
		while (contador < 3) {
			ImprimirPersonajes();
			ImprimirPreguntas();
			System.out.println("Elije el numero de pregunta que me quieres hacer: ");
			numP = input.nextLine();
			pregunta = Integer.parseInt(numP);
			
			System.out.println((matrizPersonajes[pRandom][pregunta]).replace(",", ""));
			eliminarPersonajes(pregunta);
			contador++;
		}
		
	}
	
	public void ImprimirMenu() {
		String respuesta, username;
		Scanner input = new Scanner(System.in);
		boolean jugar = true;
		System.out.println("Bienvenido al juego Adivina Quien!");
		
		while(jugar) {
			System.out.print("Introducir nombre de usuario o S para salir: ");
			username = input.nextLine();
			
			if(username.equalsIgnoreCase("s")) {
				break;
			}
			
			username = username + ".txt";
			File user = new File(username);
			try {
				if(user.createNewFile()) {
					ImprimirJuego();
					System.out.println("¿Que personaje crees que tengo?");
					respuesta = (input.nextLine()).toLowerCase();
				
					if(respuesta.equalsIgnoreCase(nomElejido)) {
						System.out.println("Acertaste! Felicidades! :D");
						NewFile(user,true);
					}
					else {
						System.out.println("Fallaste :( Eres una deshonra a toda tu familia");
						NewFile(user,false);
					}
					
				}
				else {
					ImprimirJuego();
					System.out.println("¿Que personaje crees que tengo?");
					respuesta = (input.nextLine()).toLowerCase();
				
					if(respuesta.equalsIgnoreCase(nomElejido)) {
						System.out.println("Acertaste! Felicidades! :D");
						OldFile(user,true);
					}
					else {
						System.out.println("Fallaste :( Eres una deshonra a toda tu familia");
						OldFile(user,false);
					}
					
				}
			} catch(IOException e) {
				e.printStackTrace();
			}
			
		}
		
		System.out.print("Hasta Luego");

	}
	
	public static void NewFile(File user, boolean b) throws IOException {
		int jugados, ganados;
		if(b == true) {
			jugados = 1;
			ganados = 1;
		}
		else {
			jugados = 1;
			ganados = 0;
		}
		
		
		try {
			//para escribir en doc
			FileWriter fw = new FileWriter(user);
			PrintWriter pw = new PrintWriter(fw);
			
			pw.print("Juegos jugados:\n");
			pw.println(jugados);
			pw.print("Juegos ganados:\n");
			pw.print(ganados);
			pw.close();
			
			//para 'leer' (imprimir)
			Path fileName = Path.of(user.getPath());
			String datos = Files.readString(fileName);
			System.out.println(datos);
			
		} catch(IOException e) {
			System.out.println("Un error ocurrio");
			e.printStackTrace();
		}
		
	}
	
	public static void OldFile(File user, boolean b)  throws IOException {
		//para tener ints de nuevo
		Path fileName = Path.of(user.getPath());
		String str = (Files.readString(fileName));
		String[] contenido = str.split("\n");
		int jugados = Integer.parseInt(contenido[1]);
		int ganados = Integer.parseInt(contenido[3]);
		if(b == true) {
			jugados++;
			ganados++;
		}
		else {
			jugados++;
		}
		//reescribir?
		try {
			//para escribir en doc
			FileWriter fw = new FileWriter(user);
			PrintWriter pw = new PrintWriter(fw);
			
			pw.print("Juegos jugados:\n");
			pw.println(jugados);
			pw.print("Juegos ganados:\n");
			pw.print(ganados);
			pw.close();
			
			//para 'leer' (imprimir)
			Path fn = Path.of(user.getPath());
			String datos = Files.readString(fn);
			System.out.println(datos);
			
		} catch(IOException e) {
			System.out.println("Un error ocurrio");
			e.printStackTrace();
		}
	}
	
	public static void CrearPersonajesNR() {
		VaciarMatriz();
		for(int i = 0; i < matrizPersonajes.length; i++) {
			Personaje a = new Personaje();
			matrizPersonajes[i][0] = a.getNombre() + ":";
			matrizPersonajes[i][1] = a.getEsBellako() + ", ";
			matrizPersonajes[i][2] = a.getTomaKittyChelas() + ", ";
			matrizPersonajes[i][3] = a.getEsFanDeChayan() + ", ";
			matrizPersonajes[i][4] = a.getLeGustaElMambo();
			if(i != 0) {
				while (EsRepetido(matrizPersonajes, i)) {
					a.setEsBellako();
					a.setTomaKittyChelas();
					a.setEsFanDeChayan();
					a.setLeGustaElMambo();
					matrizPersonajes[i][0] = a.getNombre() + ":";
					matrizPersonajes[i][1] = a.getEsBellako() + ", ";
					matrizPersonajes[i][2] = a.getTomaKittyChelas() + ", ";
					matrizPersonajes[i][3] = a.getEsFanDeChayan() + ", ";
					matrizPersonajes[i][4] = a.getLeGustaElMambo();
				}
				matrizPersonajes[i][1] = a.getEsBellako() + ", ";
				matrizPersonajes[i][2] = a.getTomaKittyChelas() + ", ";
				matrizPersonajes[i][3] = a.getEsFanDeChayan() + ", ";
				matrizPersonajes[i][4] = a.getLeGustaElMambo();
			}
			else {
				matrizPersonajes[i][1] = a.getEsBellako() + ", ";
				matrizPersonajes[i][2] = a.getTomaKittyChelas() + ", ";
				matrizPersonajes[i][3] = a.getEsFanDeChayan() + ", ";
				matrizPersonajes[i][4] = a.getLeGustaElMambo();
			}
		}
	}
	
	public static boolean EsRepetido(String[][] m, int i) {
		int contador;
			for(int k = 0; k < i; k++) {
				contador = 4;
				for(int l = 1; l < 5; l++) {
					if(m[i][l] == m[k][l]) {
						contador = contador - 1;
						if(contador == 0) {
							return true;
						}
					}
				}
			}
			return false;
	}
	
	
	public static void ImprimirPersonajes() {
		for(int i = 0; i < matrizPersonajes.length; i++) {
			for(int j = 0; j < matrizPersonajes[i].length; j++) {
				System.out.print(matrizPersonajes[i][j] + " ");
			}
			System.out.println(" ");
		}
		System.out.print("\n");
		
	}
	
	public static void ImprimirPreguntas() {
		for(int i = 0; i < preguntas.length; i++) {
			System.out.println(preguntas[i]);
		}
	}
	
	public static void eliminarPersonajes(int i) {
		
		for(int fila = 0; fila < matrizPersonajes.length; fila++) {
			if(matrizPersonajes[pRandom][i].equals(matrizPersonajes[fila][i])) {
				continue;
			}
			else {
				for(int columnas = 1; columnas < matrizPersonajes[fila].length; columnas++) {
					matrizPersonajes[fila][columnas] = "";
				}
			}
		}

	}
	
	public static void VaciarMatriz() {
		for(int i = 0; i < matrizPersonajes.length; i++) {
			for(int j = 0; j < matrizPersonajes[i].length; j++) {
				matrizPersonajes[i][j] = "";
			}
		}
	}

}
